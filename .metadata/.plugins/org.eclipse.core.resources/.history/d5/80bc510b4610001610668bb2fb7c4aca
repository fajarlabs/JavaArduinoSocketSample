package com.app.socket.util;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

public class SocketServerUtil {

	private ServerSocket serverSocket;
	private Socket socket;
	private Integer port, timeOut;
	
	public SocketServerUtil(int port, int timeOut) {
		this.port = port;
		this.timeOut = timeOut;
	}
	
	public SocketServerUtil() {}
	
	public Boolean connect() {
		try {
			serverSocket = new ServerSocket(port);
			serverSocket.setSoTimeout(timeOut);
			socket = serverSocket.accept();
			return true;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		
		return false;
	}
	
	public Boolean sendData(String message) {
		DataOutputStream out = null ;
		try {
			out = new DataOutputStream(socket.getOutputStream());
			out.writeUTF(message);
			return true;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return false;
	}
	
	public Boolean close() {
		if(!socket.isClosed()) {
			try {
				socket.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return true;
		}
		
		return false;
		
	}
	
	public String receiveData() {
		// Input stream
		DataInputStream in;
		String readUTF = null;
		try {
			in = new DataInputStream(socket.getInputStream());
			// Receive Data
			readUTF = in.readUTF();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		
		return readUTF;
	}
	
	public Integer getPort() {
		return port;
	}

	public void setPort(Integer port) {
		this.port = port;
	}

	public Integer getTimeOut() {
		return timeOut;
	}

	public void setTimeOut(Integer timeOut) {
		this.timeOut = timeOut;
	}
}
